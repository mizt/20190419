#import "MetalView.h"

namespace Plane {
    static const int VERTICES_SIZE = 576;
    static const float vertices[VERTICES_SIZE][4] = {
    {-10.00,-10.00,0.00,1.0},
    {-10.00,-9.35,0.00,1.0},
    {-10.00,-8.71,0.00,1.0},
    {-10.00,-8.06,0.00,1.0},
    {-10.00,-7.42,0.00,1.0},
    {-10.00,-6.77,0.00,1.0},
    {-10.00,-6.13,0.00,1.0},
    {-10.00,-5.48,0.00,1.0},
    {-10.00,-4.84,0.00,1.0},
    {-10.00,-4.19,0.00,1.0},
    {-10.00,-3.55,0.00,1.0},
    {-10.00,-2.90,0.00,1.0},
    {-10.00,-2.26,0.00,1.0},
    {-10.00,-1.61,0.00,1.0},
    {-10.00,-0.97,0.00,1.0},
    {-10.00,-0.32,0.00,1.0},
    {-10.00,0.32,0.00,1.0},
    {-10.00,0.97,0.00,1.0},
    {-10.00,1.61,0.00,1.0},
    {-10.00,2.26,0.00,1.0},
    {-10.00,2.90,0.00,1.0},
    {-10.00,3.55,0.00,1.0},
    {-10.00,4.19,0.00,1.0},
    {-10.00,4.84,0.00,1.0},
    {-10.00,5.48,0.00,1.0},
    {-10.00,6.13,0.00,1.0},
    {-10.00,6.77,0.00,1.0},
    {-10.00,7.42,0.00,1.0},
    {-10.00,8.06,0.00,1.0},
    {-10.00,8.71,0.00,1.0},
    {-10.00,9.35,0.00,1.0},
    {-10.00,10.00,0.00,1.0},
    {-8.82,-10.00,0.00,1.0},
    {-8.82,-9.35,0.63,1.0},
    {-8.82,-8.71,0.68,1.0},
    {-8.82,-8.06,0.93,1.0},
    {-8.82,-7.42,0.34,1.0},
    {-8.82,-6.77,-0.34,1.0},
    {-8.82,-6.13,-0.08,1.0},
    {-8.82,-5.48,-0.01,1.0},
    {-8.82,-4.84,-0.82,1.0},
    {-8.82,-4.19,-0.15,1.0},
    {-8.82,-3.55,-1.20,1.0},
    {-8.82,-2.90,-0.79,1.0},
    {-8.82,-2.26,-0.43,1.0},
    {-8.82,-1.61,-0.21,1.0},
    {-8.82,-0.97,-0.05,1.0},
    {-8.82,-0.32,1.08,1.0},
    {-8.82,0.32,-1.01,1.0},
    {-8.82,0.97,1.13,1.0},
    {-8.82,1.61,0.07,1.0},
    {-8.82,2.26,0.22,1.0},
    {-8.82,2.90,0.33,1.0},
    {-8.82,3.55,0.37,1.0},
    {-8.82,4.19,-0.67,1.0},
    {-8.82,4.84,0.86,1.0},
    {-8.82,5.48,-0.53,1.0},
    {-8.82,6.13,-1.21,1.0},
    {-8.82,6.77,-1.11,1.0},
    {-8.82,7.42,-0.61,1.0},
    {-8.82,8.06,0.97,1.0},
    {-8.82,8.71,-0.08,1.0},
    {-8.82,9.35,-0.77,1.0},
    {-8.82,10.00,0.00,1.0},
    {-7.65,-10.00,0.00,1.0},
    {-7.65,-9.35,0.28,1.0},
    {-7.65,-8.71,-0.19,1.0},
    {-7.65,-8.06,0.83,1.0},
    {-7.65,-7.42,-1.00,1.0},
    {-7.65,-6.77,-0.59,1.0},
    {-7.65,-6.13,-1.17,1.0},
    {-7.65,-5.48,0.90,1.0},
    {-7.65,-4.84,-0.64,1.0},
    {-7.65,-4.19,-1.07,1.0},
    {-7.65,-3.55,-1.12,1.0},
    {-7.65,-2.90,0.62,1.0},
    {-7.65,-2.26,-0.94,1.0},
    {-7.65,-1.61,-0.49,1.0},
    {-7.65,-0.97,0.14,1.0},
    {-7.65,-0.32,-0.56,1.0},
    {-7.65,0.32,0.41,1.0},
    {-7.65,0.97,-0.51,1.0},
    {-7.65,1.61,-0.85,1.0},
    {-7.65,2.26,0.37,1.0},
    {-7.65,2.90,-1.07,1.0},
    {-7.65,3.55,-0.42,1.0},
    {-7.65,4.19,0.36,1.0},
    {-7.65,4.84,-0.09,1.0},
    {-7.65,5.48,1.15,1.0},
    {-7.65,6.13,-0.25,1.0},
    {-7.65,6.77,0.62,1.0},
    {-7.65,7.42,-0.40,1.0},
    {-7.65,8.06,0.09,1.0},
    {-7.65,8.71,-1.22,1.0},
    {-7.65,9.35,0.72,1.0},
    {-7.65,10.00,0.00,1.0},
    {-6.47,-10.00,0.00,1.0},
    {-6.47,-9.35,0.34,1.0},
    {-6.47,-8.71,-1.04,1.0},
    {-6.47,-8.06,1.13,1.0},
    {-6.47,-7.42,-0.90,1.0},
    {-6.47,-6.77,0.38,1.0},
    {-6.47,-6.13,1.19,1.0},
    {-6.47,-5.48,0.13,1.0},
    {-6.47,-4.84,-0.40,1.0},
    {-6.47,-4.19,0.01,1.0},
    {-6.47,-3.55,0.49,1.0},
    {-6.47,-2.90,-0.61,1.0},
    {-6.47,-2.26,-0.59,1.0},
    {-6.47,-1.61,-1.03,1.0},
    {-6.47,-0.97,0.94,1.0},
    {-6.47,-0.32,-0.44,1.0},
    {-6.47,0.32,0.29,1.0},
    {-6.47,0.97,0.80,1.0},
    {-6.47,1.61,0.28,1.0},
    {-6.47,2.26,1.16,1.0},
    {-6.47,2.90,1.17,1.0},
    {-6.47,3.55,0.99,1.0},
    {-6.47,4.19,0.86,1.0},
    {-6.47,4.84,0.18,1.0},
    {-6.47,5.48,0.86,1.0},
    {-6.47,6.13,0.01,1.0},
    {-6.47,6.77,-1.11,1.0},
    {-6.47,7.42,1.21,1.0},
    {-6.47,8.06,0.51,1.0},
    {-6.47,8.71,-0.63,1.0},
    {-6.47,9.35,0.07,1.0},
    {-6.47,10.00,0.00,1.0},
    {-5.29,-10.00,0.00,1.0},
    {-5.29,-9.35,0.51,1.0},
    {-5.29,-8.71,0.91,1.0},
    {-5.29,-8.06,1.01,1.0},
    {-5.29,-7.42,0.11,1.0},
    {-5.29,-6.77,0.65,1.0},
    {-5.29,-6.13,-0.24,1.0},
    {-5.29,-5.48,-0.67,1.0},
    {-5.29,-4.84,0.11,1.0},
    {-5.29,-4.19,-0.36,1.0},
    {-5.29,-3.55,-0.94,1.0},
    {-5.29,-2.90,-0.56,1.0},
    {-5.29,-2.26,-0.82,1.0},
    {-5.29,-1.61,0.52,1.0},
    {-5.29,-0.97,0.78,1.0},
    {-5.29,-0.32,0.07,1.0},
    {-5.29,0.32,0.78,1.0},
    {-5.29,0.97,-0.56,1.0},
    {-5.29,1.61,-0.72,1.0},
    {-5.29,2.26,1.18,1.0},
    {-5.29,2.90,-0.16,1.0},
    {-5.29,3.55,0.78,1.0},
    {-5.29,4.19,0.54,1.0},
    {-5.29,4.84,0.79,1.0},
    {-5.29,5.48,1.01,1.0},
    {-5.29,6.13,0.69,1.0},
    {-5.29,6.77,0.10,1.0},
    {-5.29,7.42,-0.03,1.0},
    {-5.29,8.06,0.67,1.0},
    {-5.29,8.71,0.99,1.0},
    {-5.29,9.35,-0.23,1.0},
    {-5.29,10.00,0.00,1.0},
    {-4.12,-10.00,0.00,1.0},
    {-4.12,-9.35,0.02,1.0},
    {-4.12,-8.71,-1.15,1.0},
    {-4.12,-8.06,-0.79,1.0},
    {-4.12,-7.42,-0.36,1.0},
    {-4.12,-6.77,-0.58,1.0},
    {-4.12,-6.13,-0.04,1.0},
    {-4.12,-5.48,0.33,1.0},
    {-4.12,-4.84,-1.09,1.0},
    {-4.12,-4.19,-1.01,1.0},
    {-4.12,-3.55,-0.59,1.0},
    {-4.12,-2.90,-0.39,1.0},
    {-4.12,-2.26,-0.87,1.0},
    {-4.12,-1.61,-0.65,1.0},
    {-4.12,-0.97,-0.34,1.0},
    {-4.12,-0.32,-0.83,1.0},
    {-4.12,0.32,-1.19,1.0},
    {-4.12,0.97,-0.58,1.0},
    {-4.12,1.61,0.48,1.0},
    {-4.12,2.26,1.07,1.0},
    {-4.12,2.90,-0.79,1.0},
    {-4.12,3.55,-0.81,1.0},
    {-4.12,4.19,-0.45,1.0},
    {-4.12,4.84,0.63,1.0},
    {-4.12,5.48,1.25,1.0},
    {-4.12,6.13,0.98,1.0},
    {-4.12,6.77,0.65,1.0},
    {-4.12,7.42,-0.73,1.0},
    {-4.12,8.06,-0.05,1.0},
    {-4.12,8.71,-0.21,1.0},
    {-4.12,9.35,-0.73,1.0},
    {-4.12,10.00,0.00,1.0},
    {-2.94,-10.00,0.00,1.0},
    {-2.94,-9.35,-0.22,1.0},
    {-2.94,-8.71,-0.55,1.0},
    {-2.94,-8.06,0.23,1.0},
    {-2.94,-7.42,0.65,1.0},
    {-2.94,-6.77,0.24,1.0},
    {-2.94,-6.13,-0.16,1.0},
    {-2.94,-5.48,0.29,1.0},
    {-2.94,-4.84,0.96,1.0},
    {-2.94,-4.19,0.18,1.0},
    {-2.94,-3.55,0.55,1.0},
    {-2.94,-2.90,1.00,1.0},
    {-2.94,-2.26,-0.72,1.0},
    {-2.94,-1.61,-0.39,1.0},
    {-2.94,-0.97,0.04,1.0},
    {-2.94,-0.32,-0.80,1.0},
    {-2.94,0.32,0.50,1.0},
    {-2.94,0.97,-1.22,1.0},
    {-2.94,1.61,0.82,1.0},
    {-2.94,2.26,-0.99,1.0},
    {-2.94,2.90,-0.83,1.0},
    {-2.94,3.55,0.10,1.0},
    {-2.94,4.19,-0.16,1.0},
    {-2.94,4.84,1.15,1.0},
    {-2.94,5.48,1.02,1.0},
    {-2.94,6.13,-0.23,1.0},
    {-2.94,6.77,0.05,1.0},
    {-2.94,7.42,-0.07,1.0},
    {-2.94,8.06,-1.08,1.0},
    {-2.94,8.71,0.95,1.0},
    {-2.94,9.35,0.93,1.0},
    {-2.94,10.00,0.00,1.0},
    {-1.76,-10.00,0.00,1.0},
    {-1.76,-9.35,0.85,1.0},
    {-1.76,-8.71,-1.12,1.0},
    {-1.76,-8.06,-1.14,1.0},
    {-1.76,-7.42,-1.03,1.0},
    {-1.76,-6.77,-0.72,1.0},
    {-1.76,-6.13,0.63,1.0},
    {-1.76,-5.48,-0.15,1.0},
    {-1.76,-4.84,-0.54,1.0},
    {-1.76,-4.19,-1.14,1.0},
    {-1.76,-3.55,-1.24,1.0},
    {-1.76,-2.90,-1.04,1.0},
    {-1.76,-2.26,0.25,1.0},
    {-1.76,-1.61,-0.16,1.0},
    {-1.76,-0.97,0.71,1.0},
    {-1.76,-0.32,-0.60,1.0},
    {-1.76,0.32,-0.31,1.0},
    {-1.76,0.97,-1.15,1.0},
    {-1.76,1.61,0.58,1.0},
    {-1.76,2.26,1.12,1.0},
    {-1.76,2.90,0.96,1.0},
    {-1.76,3.55,0.70,1.0},
    {-1.76,4.19,1.05,1.0},
    {-1.76,4.84,0.09,1.0},
    {-1.76,5.48,0.47,1.0},
    {-1.76,6.13,-0.90,1.0},
    {-1.76,6.77,-0.41,1.0},
    {-1.76,7.42,0.89,1.0},
    {-1.76,8.06,0.45,1.0},
    {-1.76,8.71,0.57,1.0},
    {-1.76,9.35,-1.03,1.0},
    {-1.76,10.00,0.00,1.0},
    {-0.59,-10.00,0.00,1.0},
    {-0.59,-9.35,-1.08,1.0},
    {-0.59,-8.71,0.86,1.0},
    {-0.59,-8.06,-0.71,1.0},
    {-0.59,-7.42,0.76,1.0},
    {-0.59,-6.77,-0.28,1.0},
    {-0.59,-6.13,-0.70,1.0},
    {-0.59,-5.48,0.72,1.0},
    {-0.59,-4.84,-0.95,1.0},
    {-0.59,-4.19,-0.28,1.0},
    {-0.59,-3.55,-0.19,1.0},
    {-0.59,-2.90,-1.04,1.0},
    {-0.59,-2.26,-0.47,1.0},
    {-0.59,-1.61,0.59,1.0},
    {-0.59,-0.97,-0.90,1.0},
    {-0.59,-0.32,-0.54,1.0},
    {-0.59,0.32,0.93,1.0},
    {-0.59,0.97,-1.15,1.0},
    {-0.59,1.61,0.60,1.0},
    {-0.59,2.26,-0.10,1.0},
    {-0.59,2.90,-0.53,1.0},
    {-0.59,3.55,0.33,1.0},
    {-0.59,4.19,1.15,1.0},
    {-0.59,4.84,-0.24,1.0},
    {-0.59,5.48,0.29,1.0},
    {-0.59,6.13,-0.38,1.0},
    {-0.59,6.77,0.41,1.0},
    {-0.59,7.42,-1.11,1.0},
    {-0.59,8.06,0.32,1.0},
    {-0.59,8.71,-1.06,1.0},
    {-0.59,9.35,-0.00,1.0},
    {-0.59,10.00,0.00,1.0},
    {0.59,-10.00,0.00,1.0},
    {0.59,-9.35,-0.30,1.0},
    {0.59,-8.71,-0.85,1.0},
    {0.59,-8.06,0.89,1.0},
    {0.59,-7.42,0.21,1.0},
    {0.59,-6.77,-0.16,1.0},
    {0.59,-6.13,0.04,1.0},
    {0.59,-5.48,-0.60,1.0},
    {0.59,-4.84,-0.12,1.0},
    {0.59,-4.19,0.97,1.0},
    {0.59,-3.55,-1.01,1.0},
    {0.59,-2.90,-0.37,1.0},
    {0.59,-2.26,-0.21,1.0},
    {0.59,-1.61,-0.42,1.0},
    {0.59,-0.97,-0.21,1.0},
    {0.59,-0.32,1.10,1.0},
    {0.59,0.32,0.33,1.0},
    {0.59,0.97,0.47,1.0},
    {0.59,1.61,-0.55,1.0},
    {0.59,2.26,0.60,1.0},
    {0.59,2.90,0.40,1.0},
    {0.59,3.55,-0.58,1.0},
    {0.59,4.19,-1.01,1.0},
    {0.59,4.84,1.11,1.0},
    {0.59,5.48,0.93,1.0},
    {0.59,6.13,0.11,1.0},
    {0.59,6.77,1.10,1.0},
    {0.59,7.42,0.81,1.0},
    {0.59,8.06,-0.07,1.0},
    {0.59,8.71,1.11,1.0},
    {0.59,9.35,-0.67,1.0},
    {0.59,10.00,0.00,1.0},
    {1.76,-10.00,0.00,1.0},
    {1.76,-9.35,-0.03,1.0},
    {1.76,-8.71,-1.18,1.0},
    {1.76,-8.06,-1.01,1.0},
    {1.76,-7.42,0.94,1.0},
    {1.76,-6.77,0.12,1.0},
    {1.76,-6.13,-1.00,1.0},
    {1.76,-5.48,-0.95,1.0},
    {1.76,-4.84,0.01,1.0},
    {1.76,-4.19,0.39,1.0},
    {1.76,-3.55,0.84,1.0},
    {1.76,-2.90,-0.23,1.0},
    {1.76,-2.26,-0.03,1.0},
    {1.76,-1.61,0.03,1.0},
    {1.76,-0.97,-0.75,1.0},
    {1.76,-0.32,-0.73,1.0},
    {1.76,0.32,-1.11,1.0},
    {1.76,0.97,-0.04,1.0},
    {1.76,1.61,-0.20,1.0},
    {1.76,2.26,-0.23,1.0},
    {1.76,2.90,-0.24,1.0},
    {1.76,3.55,1.11,1.0},
    {1.76,4.19,-1.05,1.0},
    {1.76,4.84,-1.24,1.0},
    {1.76,5.48,0.11,1.0},
    {1.76,6.13,-1.20,1.0},
    {1.76,6.77,0.04,1.0},
    {1.76,7.42,-0.92,1.0},
    {1.76,8.06,-0.90,1.0},
    {1.76,8.71,0.90,1.0},
    {1.76,9.35,1.10,1.0},
    {1.76,10.00,0.00,1.0},
    {2.94,-10.00,0.00,1.0},
    {2.94,-9.35,0.69,1.0},
    {2.94,-8.71,1.16,1.0},
    {2.94,-8.06,0.80,1.0},
    {2.94,-7.42,-1.03,1.0},
    {2.94,-6.77,-0.54,1.0},
    {2.94,-6.13,-0.27,1.0},
    {2.94,-5.48,-1.00,1.0},
    {2.94,-4.84,1.20,1.0},
    {2.94,-4.19,0.47,1.0},
    {2.94,-3.55,1.14,1.0},
    {2.94,-2.90,-0.95,1.0},
    {2.94,-2.26,-0.84,1.0},
    {2.94,-1.61,1.23,1.0},
    {2.94,-0.97,-0.21,1.0},
    {2.94,-0.32,-0.62,1.0},
    {2.94,0.32,-0.76,1.0},
    {2.94,0.97,-1.02,1.0},
    {2.94,1.61,0.74,1.0},
    {2.94,2.26,0.76,1.0},
    {2.94,2.90,0.27,1.0},
    {2.94,3.55,-0.57,1.0},
    {2.94,4.19,1.07,1.0},
    {2.94,4.84,0.22,1.0},
    {2.94,5.48,-0.79,1.0},
    {2.94,6.13,0.12,1.0},
    {2.94,6.77,-1.01,1.0},
    {2.94,7.42,0.03,1.0},
    {2.94,8.06,-0.28,1.0},
    {2.94,8.71,-0.69,1.0},
    {2.94,9.35,-1.13,1.0},
    {2.94,10.00,0.00,1.0},
    {4.12,-10.00,0.00,1.0},
    {4.12,-9.35,0.09,1.0},
    {4.12,-8.71,-0.46,1.0},
    {4.12,-8.06,0.09,1.0},
    {4.12,-7.42,0.75,1.0},
    {4.12,-6.77,0.71,1.0},
    {4.12,-6.13,-0.10,1.0},
    {4.12,-5.48,1.11,1.0},
    {4.12,-4.84,-0.15,1.0},
    {4.12,-4.19,-0.11,1.0},
    {4.12,-3.55,0.99,1.0},
    {4.12,-2.90,-0.08,1.0},
    {4.12,-2.26,0.08,1.0},
    {4.12,-1.61,0.55,1.0},
    {4.12,-0.97,-0.27,1.0},
    {4.12,-0.32,-0.78,1.0},
    {4.12,0.32,-0.08,1.0},
    {4.12,0.97,-1.11,1.0},
    {4.12,1.61,0.16,1.0},
    {4.12,2.26,-0.65,1.0},
    {4.12,2.90,-0.31,1.0},
    {4.12,3.55,-0.44,1.0},
    {4.12,4.19,-1.16,1.0},
    {4.12,4.84,0.05,1.0},
    {4.12,5.48,-0.40,1.0},
    {4.12,6.13,0.79,1.0},
    {4.12,6.77,-0.54,1.0},
    {4.12,7.42,0.34,1.0},
    {4.12,8.06,-0.02,1.0},
    {4.12,8.71,1.16,1.0},
    {4.12,9.35,-0.48,1.0},
    {4.12,10.00,0.00,1.0},
    {5.29,-10.00,0.00,1.0},
    {5.29,-9.35,-0.30,1.0},
    {5.29,-8.71,0.36,1.0},
    {5.29,-8.06,-0.52,1.0},
    {5.29,-7.42,0.90,1.0},
    {5.29,-6.77,1.10,1.0},
    {5.29,-6.13,-0.34,1.0},
    {5.29,-5.48,0.31,1.0},
    {5.29,-4.84,0.61,1.0},
    {5.29,-4.19,-0.84,1.0},
    {5.29,-3.55,0.65,1.0},
    {5.29,-2.90,0.02,1.0},
    {5.29,-2.26,1.18,1.0},
    {5.29,-1.61,-1.22,1.0},
    {5.29,-0.97,-0.73,1.0},
    {5.29,-0.32,-0.33,1.0},
    {5.29,0.32,1.06,1.0},
    {5.29,0.97,0.59,1.0},
    {5.29,1.61,-1.14,1.0},
    {5.29,2.26,-0.41,1.0},
    {5.29,2.90,-0.84,1.0},
    {5.29,3.55,-0.54,1.0},
    {5.29,4.19,0.89,1.0},
    {5.29,4.84,-0.73,1.0},
    {5.29,5.48,-1.19,1.0},
    {5.29,6.13,1.18,1.0},
    {5.29,6.77,-0.18,1.0},
    {5.29,7.42,-1.19,1.0},
    {5.29,8.06,0.11,1.0},
    {5.29,8.71,-0.92,1.0},
    {5.29,9.35,1.11,1.0},
    {5.29,10.00,0.00,1.0},
    {6.47,-10.00,0.00,1.0},
    {6.47,-9.35,0.44,1.0},
    {6.47,-8.71,0.43,1.0},
    {6.47,-8.06,-0.88,1.0},
    {6.47,-7.42,-0.45,1.0},
    {6.47,-6.77,0.40,1.0},
    {6.47,-6.13,1.23,1.0},
    {6.47,-5.48,-0.05,1.0},
    {6.47,-4.84,-0.25,1.0},
    {6.47,-4.19,-0.06,1.0},
    {6.47,-3.55,0.88,1.0},
    {6.47,-2.90,-0.41,1.0},
    {6.47,-2.26,-0.77,1.0},
    {6.47,-1.61,1.21,1.0},
    {6.47,-0.97,-0.19,1.0},
    {6.47,-0.32,-0.27,1.0},
    {6.47,0.32,-0.99,1.0},
    {6.47,0.97,-0.83,1.0},
    {6.47,1.61,-0.06,1.0},
    {6.47,2.26,0.52,1.0},
    {6.47,2.90,-0.59,1.0},
    {6.47,3.55,-0.76,1.0},
    {6.47,4.19,-0.37,1.0},
    {6.47,4.84,0.99,1.0},
    {6.47,5.48,0.75,1.0},
    {6.47,6.13,-0.87,1.0},
    {6.47,6.77,-0.14,1.0},
    {6.47,7.42,-1.14,1.0},
    {6.47,8.06,-0.74,1.0},
    {6.47,8.71,-0.30,1.0},
    {6.47,9.35,0.36,1.0},
    {6.47,10.00,0.00,1.0},
    {7.65,-10.00,0.00,1.0},
    {7.65,-9.35,0.99,1.0},
    {7.65,-8.71,-0.85,1.0},
    {7.65,-8.06,0.38,1.0},
    {7.65,-7.42,1.06,1.0},
    {7.65,-6.77,-0.96,1.0},
    {7.65,-6.13,0.34,1.0},
    {7.65,-5.48,0.84,1.0},
    {7.65,-4.84,-0.63,1.0},
    {7.65,-4.19,1.18,1.0},
    {7.65,-3.55,0.79,1.0},
    {7.65,-2.90,-1.23,1.0},
    {7.65,-2.26,1.13,1.0},
    {7.65,-1.61,-0.44,1.0},
    {7.65,-0.97,0.35,1.0},
    {7.65,-0.32,-0.05,1.0},
    {7.65,0.32,-0.23,1.0},
    {7.65,0.97,1.14,1.0},
    {7.65,1.61,-0.79,1.0},
    {7.65,2.26,0.70,1.0},
    {7.65,2.90,0.90,1.0},
    {7.65,3.55,-0.36,1.0},
    {7.65,4.19,0.49,1.0},
    {7.65,4.84,0.85,1.0},
    {7.65,5.48,0.18,1.0},
    {7.65,6.13,0.34,1.0},
    {7.65,6.77,-1.02,1.0},
    {7.65,7.42,-0.10,1.0},
    {7.65,8.06,-1.12,1.0},
    {7.65,8.71,-0.79,1.0},
    {7.65,9.35,1.02,1.0},
    {7.65,10.00,0.00,1.0},
    {8.82,-10.00,0.00,1.0},
    {8.82,-9.35,-0.49,1.0},
    {8.82,-8.71,0.77,1.0},
    {8.82,-8.06,0.73,1.0},
    {8.82,-7.42,-0.94,1.0},
    {8.82,-6.77,-0.55,1.0},
    {8.82,-6.13,0.18,1.0},
    {8.82,-5.48,-0.86,1.0},
    {8.82,-4.84,0.13,1.0},
    {8.82,-4.19,1.22,1.0},
    {8.82,-3.55,-0.55,1.0},
    {8.82,-2.90,-0.65,1.0},
    {8.82,-2.26,0.48,1.0},
    {8.82,-1.61,0.41,1.0},
    {8.82,-0.97,0.12,1.0},
    {8.82,-0.32,1.11,1.0},
    {8.82,0.32,1.18,1.0},
    {8.82,0.97,-0.71,1.0},
    {8.82,1.61,-0.31,1.0},
    {8.82,2.26,-1.23,1.0},
    {8.82,2.90,-1.25,1.0},
    {8.82,3.55,0.28,1.0},
    {8.82,4.19,0.81,1.0},
    {8.82,4.84,1.19,1.0},
    {8.82,5.48,0.03,1.0},
    {8.82,6.13,0.07,1.0},
    {8.82,6.77,-0.50,1.0},
    {8.82,7.42,-0.75,1.0},
    {8.82,8.06,-0.40,1.0},
    {8.82,8.71,-0.39,1.0},
    {8.82,9.35,-0.39,1.0},
    {8.82,10.00,0.00,1.0},
    {10.00,-10.00,0.00,1.0},
    {10.00,-9.35,0.00,1.0},
    {10.00,-8.71,0.00,1.0},
    {10.00,-8.06,0.00,1.0},
    {10.00,-7.42,0.00,1.0},
    {10.00,-6.77,0.00,1.0},
    {10.00,-6.13,0.00,1.0},
    {10.00,-5.48,0.00,1.0},
    {10.00,-4.84,0.00,1.0},
    {10.00,-4.19,0.00,1.0},
    {10.00,-3.55,0.00,1.0},
    {10.00,-2.90,0.00,1.0},
    {10.00,-2.26,0.00,1.0},
    {10.00,-1.61,0.00,1.0},
    {10.00,-0.97,0.00,1.0},
    {10.00,-0.32,0.00,1.0},
    {10.00,0.32,0.00,1.0},
    {10.00,0.97,0.00,1.0},
    {10.00,1.61,0.00,1.0},
    {10.00,2.26,0.00,1.0},
    {10.00,2.90,0.00,1.0},
    {10.00,3.55,0.00,1.0},
    {10.00,4.19,0.00,1.0},
    {10.00,4.84,0.00,1.0},
    {10.00,5.48,0.00,1.0},
    {10.00,6.13,0.00,1.0},
    {10.00,6.77,0.00,1.0},
    {10.00,7.42,0.00,1.0},
    {10.00,8.06,0.00,1.0},
    {10.00,8.71,0.00,1.0},
    {10.00,9.35,0.00,1.0},
    {10.00,10.00,0.00,1.0}
    };
    static const int INDICES_SIZE = 3162;
    static const unsigned short indices[INDICES_SIZE] = {
    0,1,32,1,32,33,
    1,2,33,2,33,34,
    2,3,34,3,34,35,
    3,4,35,4,35,36,
    4,5,36,5,36,37,
    5,6,37,6,37,38,
    6,7,38,7,38,39,
    7,8,39,8,39,40,
    8,9,40,9,40,41,
    9,10,41,10,41,42,
    10,11,42,11,42,43,
    11,12,43,12,43,44,
    12,13,44,13,44,45,
    13,14,45,14,45,46,
    14,15,46,15,46,47,
    15,16,47,16,47,48,
    16,17,48,17,48,49,
    17,18,49,18,49,50,
    18,19,50,19,50,51,
    19,20,51,20,51,52,
    20,21,52,21,52,53,
    21,22,53,22,53,54,
    22,23,54,23,54,55,
    23,24,55,24,55,56,
    24,25,56,25,56,57,
    25,26,57,26,57,58,
    26,27,58,27,58,59,
    27,28,59,28,59,60,
    28,29,60,29,60,61,
    29,30,61,30,61,62,
    30,31,62,31,62,63,
    32,33,64,33,64,65,
    33,34,65,34,65,66,
    34,35,66,35,66,67,
    35,36,67,36,67,68,
    36,37,68,37,68,69,
    37,38,69,38,69,70,
    38,39,70,39,70,71,
    39,40,71,40,71,72,
    40,41,72,41,72,73,
    41,42,73,42,73,74,
    42,43,74,43,74,75,
    43,44,75,44,75,76,
    44,45,76,45,76,77,
    45,46,77,46,77,78,
    46,47,78,47,78,79,
    47,48,79,48,79,80,
    48,49,80,49,80,81,
    49,50,81,50,81,82,
    50,51,82,51,82,83,
    51,52,83,52,83,84,
    52,53,84,53,84,85,
    53,54,85,54,85,86,
    54,55,86,55,86,87,
    55,56,87,56,87,88,
    56,57,88,57,88,89,
    57,58,89,58,89,90,
    58,59,90,59,90,91,
    59,60,91,60,91,92,
    60,61,92,61,92,93,
    61,62,93,62,93,94,
    62,63,94,63,94,95,
    64,65,96,65,96,97,
    65,66,97,66,97,98,
    66,67,98,67,98,99,
    67,68,99,68,99,100,
    68,69,100,69,100,101,
    69,70,101,70,101,102,
    70,71,102,71,102,103,
    71,72,103,72,103,104,
    72,73,104,73,104,105,
    73,74,105,74,105,106,
    74,75,106,75,106,107,
    75,76,107,76,107,108,
    76,77,108,77,108,109,
    77,78,109,78,109,110,
    78,79,110,79,110,111,
    79,80,111,80,111,112,
    80,81,112,81,112,113,
    81,82,113,82,113,114,
    82,83,114,83,114,115,
    83,84,115,84,115,116,
    84,85,116,85,116,117,
    85,86,117,86,117,118,
    86,87,118,87,118,119,
    87,88,119,88,119,120,
    88,89,120,89,120,121,
    89,90,121,90,121,122,
    90,91,122,91,122,123,
    91,92,123,92,123,124,
    92,93,124,93,124,125,
    93,94,125,94,125,126,
    94,95,126,95,126,127,
    96,97,128,97,128,129,
    97,98,129,98,129,130,
    98,99,130,99,130,131,
    99,100,131,100,131,132,
    100,101,132,101,132,133,
    101,102,133,102,133,134,
    102,103,134,103,134,135,
    103,104,135,104,135,136,
    104,105,136,105,136,137,
    105,106,137,106,137,138,
    106,107,138,107,138,139,
    107,108,139,108,139,140,
    108,109,140,109,140,141,
    109,110,141,110,141,142,
    110,111,142,111,142,143,
    111,112,143,112,143,144,
    112,113,144,113,144,145,
    113,114,145,114,145,146,
    114,115,146,115,146,147,
    115,116,147,116,147,148,
    116,117,148,117,148,149,
    117,118,149,118,149,150,
    118,119,150,119,150,151,
    119,120,151,120,151,152,
    120,121,152,121,152,153,
    121,122,153,122,153,154,
    122,123,154,123,154,155,
    123,124,155,124,155,156,
    124,125,156,125,156,157,
    125,126,157,126,157,158,
    126,127,158,127,158,159,
    128,129,160,129,160,161,
    129,130,161,130,161,162,
    130,131,162,131,162,163,
    131,132,163,132,163,164,
    132,133,164,133,164,165,
    133,134,165,134,165,166,
    134,135,166,135,166,167,
    135,136,167,136,167,168,
    136,137,168,137,168,169,
    137,138,169,138,169,170,
    138,139,170,139,170,171,
    139,140,171,140,171,172,
    140,141,172,141,172,173,
    141,142,173,142,173,174,
    142,143,174,143,174,175,
    143,144,175,144,175,176,
    144,145,176,145,176,177,
    145,146,177,146,177,178,
    146,147,178,147,178,179,
    147,148,179,148,179,180,
    148,149,180,149,180,181,
    149,150,181,150,181,182,
    150,151,182,151,182,183,
    151,152,183,152,183,184,
    152,153,184,153,184,185,
    153,154,185,154,185,186,
    154,155,186,155,186,187,
    155,156,187,156,187,188,
    156,157,188,157,188,189,
    157,158,189,158,189,190,
    158,159,190,159,190,191,
    160,161,192,161,192,193,
    161,162,193,162,193,194,
    162,163,194,163,194,195,
    163,164,195,164,195,196,
    164,165,196,165,196,197,
    165,166,197,166,197,198,
    166,167,198,167,198,199,
    167,168,199,168,199,200,
    168,169,200,169,200,201,
    169,170,201,170,201,202,
    170,171,202,171,202,203,
    171,172,203,172,203,204,
    172,173,204,173,204,205,
    173,174,205,174,205,206,
    174,175,206,175,206,207,
    175,176,207,176,207,208,
    176,177,208,177,208,209,
    177,178,209,178,209,210,
    178,179,210,179,210,211,
    179,180,211,180,211,212,
    180,181,212,181,212,213,
    181,182,213,182,213,214,
    182,183,214,183,214,215,
    183,184,215,184,215,216,
    184,185,216,185,216,217,
    185,186,217,186,217,218,
    186,187,218,187,218,219,
    187,188,219,188,219,220,
    188,189,220,189,220,221,
    189,190,221,190,221,222,
    190,191,222,191,222,223,
    192,193,224,193,224,225,
    193,194,225,194,225,226,
    194,195,226,195,226,227,
    195,196,227,196,227,228,
    196,197,228,197,228,229,
    197,198,229,198,229,230,
    198,199,230,199,230,231,
    199,200,231,200,231,232,
    200,201,232,201,232,233,
    201,202,233,202,233,234,
    202,203,234,203,234,235,
    203,204,235,204,235,236,
    204,205,236,205,236,237,
    205,206,237,206,237,238,
    206,207,238,207,238,239,
    207,208,239,208,239,240,
    208,209,240,209,240,241,
    209,210,241,210,241,242,
    210,211,242,211,242,243,
    211,212,243,212,243,244,
    212,213,244,213,244,245,
    213,214,245,214,245,246,
    214,215,246,215,246,247,
    215,216,247,216,247,248,
    216,217,248,217,248,249,
    217,218,249,218,249,250,
    218,219,250,219,250,251,
    219,220,251,220,251,252,
    220,221,252,221,252,253,
    221,222,253,222,253,254,
    222,223,254,223,254,255,
    224,225,256,225,256,257,
    225,226,257,226,257,258,
    226,227,258,227,258,259,
    227,228,259,228,259,260,
    228,229,260,229,260,261,
    229,230,261,230,261,262,
    230,231,262,231,262,263,
    231,232,263,232,263,264,
    232,233,264,233,264,265,
    233,234,265,234,265,266,
    234,235,266,235,266,267,
    235,236,267,236,267,268,
    236,237,268,237,268,269,
    237,238,269,238,269,270,
    238,239,270,239,270,271,
    239,240,271,240,271,272,
    240,241,272,241,272,273,
    241,242,273,242,273,274,
    242,243,274,243,274,275,
    243,244,275,244,275,276,
    244,245,276,245,276,277,
    245,246,277,246,277,278,
    246,247,278,247,278,279,
    247,248,279,248,279,280,
    248,249,280,249,280,281,
    249,250,281,250,281,282,
    250,251,282,251,282,283,
    251,252,283,252,283,284,
    252,253,284,253,284,285,
    253,254,285,254,285,286,
    254,255,286,255,286,287,
    256,257,288,257,288,289,
    257,258,289,258,289,290,
    258,259,290,259,290,291,
    259,260,291,260,291,292,
    260,261,292,261,292,293,
    261,262,293,262,293,294,
    262,263,294,263,294,295,
    263,264,295,264,295,296,
    264,265,296,265,296,297,
    265,266,297,266,297,298,
    266,267,298,267,298,299,
    267,268,299,268,299,300,
    268,269,300,269,300,301,
    269,270,301,270,301,302,
    270,271,302,271,302,303,
    271,272,303,272,303,304,
    272,273,304,273,304,305,
    273,274,305,274,305,306,
    274,275,306,275,306,307,
    275,276,307,276,307,308,
    276,277,308,277,308,309,
    277,278,309,278,309,310,
    278,279,310,279,310,311,
    279,280,311,280,311,312,
    280,281,312,281,312,313,
    281,282,313,282,313,314,
    282,283,314,283,314,315,
    283,284,315,284,315,316,
    284,285,316,285,316,317,
    285,286,317,286,317,318,
    286,287,318,287,318,319,
    288,289,320,289,320,321,
    289,290,321,290,321,322,
    290,291,322,291,322,323,
    291,292,323,292,323,324,
    292,293,324,293,324,325,
    293,294,325,294,325,326,
    294,295,326,295,326,327,
    295,296,327,296,327,328,
    296,297,328,297,328,329,
    297,298,329,298,329,330,
    298,299,330,299,330,331,
    299,300,331,300,331,332,
    300,301,332,301,332,333,
    301,302,333,302,333,334,
    302,303,334,303,334,335,
    303,304,335,304,335,336,
    304,305,336,305,336,337,
    305,306,337,306,337,338,
    306,307,338,307,338,339,
    307,308,339,308,339,340,
    308,309,340,309,340,341,
    309,310,341,310,341,342,
    310,311,342,311,342,343,
    311,312,343,312,343,344,
    312,313,344,313,344,345,
    313,314,345,314,345,346,
    314,315,346,315,346,347,
    315,316,347,316,347,348,
    316,317,348,317,348,349,
    317,318,349,318,349,350,
    318,319,350,319,350,351,
    320,321,352,321,352,353,
    321,322,353,322,353,354,
    322,323,354,323,354,355,
    323,324,355,324,355,356,
    324,325,356,325,356,357,
    325,326,357,326,357,358,
    326,327,358,327,358,359,
    327,328,359,328,359,360,
    328,329,360,329,360,361,
    329,330,361,330,361,362,
    330,331,362,331,362,363,
    331,332,363,332,363,364,
    332,333,364,333,364,365,
    333,334,365,334,365,366,
    334,335,366,335,366,367,
    335,336,367,336,367,368,
    336,337,368,337,368,369,
    337,338,369,338,369,370,
    338,339,370,339,370,371,
    339,340,371,340,371,372,
    340,341,372,341,372,373,
    341,342,373,342,373,374,
    342,343,374,343,374,375,
    343,344,375,344,375,376,
    344,345,376,345,376,377,
    345,346,377,346,377,378,
    346,347,378,347,378,379,
    347,348,379,348,379,380,
    348,349,380,349,380,381,
    349,350,381,350,381,382,
    350,351,382,351,382,383,
    352,353,384,353,384,385,
    353,354,385,354,385,386,
    354,355,386,355,386,387,
    355,356,387,356,387,388,
    356,357,388,357,388,389,
    357,358,389,358,389,390,
    358,359,390,359,390,391,
    359,360,391,360,391,392,
    360,361,392,361,392,393,
    361,362,393,362,393,394,
    362,363,394,363,394,395,
    363,364,395,364,395,396,
    364,365,396,365,396,397,
    365,366,397,366,397,398,
    366,367,398,367,398,399,
    367,368,399,368,399,400,
    368,369,400,369,400,401,
    369,370,401,370,401,402,
    370,371,402,371,402,403,
    371,372,403,372,403,404,
    372,373,404,373,404,405,
    373,374,405,374,405,406,
    374,375,406,375,406,407,
    375,376,407,376,407,408,
    376,377,408,377,408,409,
    377,378,409,378,409,410,
    378,379,410,379,410,411,
    379,380,411,380,411,412,
    380,381,412,381,412,413,
    381,382,413,382,413,414,
    382,383,414,383,414,415,
    384,385,416,385,416,417,
    385,386,417,386,417,418,
    386,387,418,387,418,419,
    387,388,419,388,419,420,
    388,389,420,389,420,421,
    389,390,421,390,421,422,
    390,391,422,391,422,423,
    391,392,423,392,423,424,
    392,393,424,393,424,425,
    393,394,425,394,425,426,
    394,395,426,395,426,427,
    395,396,427,396,427,428,
    396,397,428,397,428,429,
    397,398,429,398,429,430,
    398,399,430,399,430,431,
    399,400,431,400,431,432,
    400,401,432,401,432,433,
    401,402,433,402,433,434,
    402,403,434,403,434,435,
    403,404,435,404,435,436,
    404,405,436,405,436,437,
    405,406,437,406,437,438,
    406,407,438,407,438,439,
    407,408,439,408,439,440,
    408,409,440,409,440,441,
    409,410,441,410,441,442,
    410,411,442,411,442,443,
    411,412,443,412,443,444,
    412,413,444,413,444,445,
    413,414,445,414,445,446,
    414,415,446,415,446,447,
    416,417,448,417,448,449,
    417,418,449,418,449,450,
    418,419,450,419,450,451,
    419,420,451,420,451,452,
    420,421,452,421,452,453,
    421,422,453,422,453,454,
    422,423,454,423,454,455,
    423,424,455,424,455,456,
    424,425,456,425,456,457,
    425,426,457,426,457,458,
    426,427,458,427,458,459,
    427,428,459,428,459,460,
    428,429,460,429,460,461,
    429,430,461,430,461,462,
    430,431,462,431,462,463,
    431,432,463,432,463,464,
    432,433,464,433,464,465,
    433,434,465,434,465,466,
    434,435,466,435,466,467,
    435,436,467,436,467,468,
    436,437,468,437,468,469,
    437,438,469,438,469,470,
    438,439,470,439,470,471,
    439,440,471,440,471,472,
    440,441,472,441,472,473,
    441,442,473,442,473,474,
    442,443,474,443,474,475,
    443,444,475,444,475,476,
    444,445,476,445,476,477,
    445,446,477,446,477,478,
    446,447,478,447,478,479,
    448,449,480,449,480,481,
    449,450,481,450,481,482,
    450,451,482,451,482,483,
    451,452,483,452,483,484,
    452,453,484,453,484,485,
    453,454,485,454,485,486,
    454,455,486,455,486,487,
    455,456,487,456,487,488,
    456,457,488,457,488,489,
    457,458,489,458,489,490,
    458,459,490,459,490,491,
    459,460,491,460,491,492,
    460,461,492,461,492,493,
    461,462,493,462,493,494,
    462,463,494,463,494,495,
    463,464,495,464,495,496,
    464,465,496,465,496,497,
    465,466,497,466,497,498,
    466,467,498,467,498,499,
    467,468,499,468,499,500,
    468,469,500,469,500,501,
    469,470,501,470,501,502,
    470,471,502,471,502,503,
    471,472,503,472,503,504,
    472,473,504,473,504,505,
    473,474,505,474,505,506,
    474,475,506,475,506,507,
    475,476,507,476,507,508,
    476,477,508,477,508,509,
    477,478,509,478,509,510,
    478,479,510,479,510,511,
    480,481,512,481,512,513,
    481,482,513,482,513,514,
    482,483,514,483,514,515,
    483,484,515,484,515,516,
    484,485,516,485,516,517,
    485,486,517,486,517,518,
    486,487,518,487,518,519,
    487,488,519,488,519,520,
    488,489,520,489,520,521,
    489,490,521,490,521,522,
    490,491,522,491,522,523,
    491,492,523,492,523,524,
    492,493,524,493,524,525,
    493,494,525,494,525,526,
    494,495,526,495,526,527,
    495,496,527,496,527,528,
    496,497,528,497,528,529,
    497,498,529,498,529,530,
    498,499,530,499,530,531,
    499,500,531,500,531,532,
    500,501,532,501,532,533,
    501,502,533,502,533,534,
    502,503,534,503,534,535,
    503,504,535,504,535,536,
    504,505,536,505,536,537,
    505,506,537,506,537,538,
    506,507,538,507,538,539,
    507,508,539,508,539,540,
    508,509,540,509,540,541,
    509,510,541,510,541,542,
    510,511,542,511,542,543,
    512,513,544,513,544,545,
    513,514,545,514,545,546,
    514,515,546,515,546,547,
    515,516,547,516,547,548,
    516,517,548,517,548,549,
    517,518,549,518,549,550,
    518,519,550,519,550,551,
    519,520,551,520,551,552,
    520,521,552,521,552,553,
    521,522,553,522,553,554,
    522,523,554,523,554,555,
    523,524,555,524,555,556,
    524,525,556,525,556,557,
    525,526,557,526,557,558,
    526,527,558,527,558,559,
    527,528,559,528,559,560,
    528,529,560,529,560,561,
    529,530,561,530,561,562,
    530,531,562,531,562,563,
    531,532,563,532,563,564,
    532,533,564,533,564,565,
    533,534,565,534,565,566,
    534,535,566,535,566,567,
    535,536,567,536,567,568,
    536,537,568,537,568,569,
    537,538,569,538,569,570,
    538,539,570,539,570,571,
    539,540,571,540,571,572,
    540,541,572,541,572,573,
    541,542,573,542,573,574,
    542,543,574,543,574,575
    };
    static const int TEXCOORD_SIZE = 576;
    static const float texcoord[TEXCOORD_SIZE][2] = {
    {0.00,0.00},
    {0.00,0.03},
    {0.00,0.06},
    {0.00,0.10},
    {0.00,0.13},
    {0.00,0.16},
    {0.00,0.19},
    {0.00,0.23},
    {0.00,0.26},
    {0.00,0.29},
    {0.00,0.32},
    {0.00,0.35},
    {0.00,0.39},
    {0.00,0.42},
    {0.00,0.45},
    {0.00,0.48},
    {0.00,0.52},
    {0.00,0.55},
    {0.00,0.58},
    {0.00,0.61},
    {0.00,0.65},
    {0.00,0.68},
    {0.00,0.71},
    {0.00,0.74},
    {0.00,0.77},
    {0.00,0.81},
    {0.00,0.84},
    {0.00,0.87},
    {0.00,0.90},
    {0.00,0.94},
    {0.00,0.97},
    {0.00,1.00},
    {0.06,0.00},
    {0.06,0.03},
    {0.06,0.06},
    {0.06,0.10},
    {0.06,0.13},
    {0.06,0.16},
    {0.06,0.19},
    {0.06,0.23},
    {0.06,0.26},
    {0.06,0.29},
    {0.06,0.32},
    {0.06,0.35},
    {0.06,0.39},
    {0.06,0.42},
    {0.06,0.45},
    {0.06,0.48},
    {0.06,0.52},
    {0.06,0.55},
    {0.06,0.58},
    {0.06,0.61},
    {0.06,0.65},
    {0.06,0.68},
    {0.06,0.71},
    {0.06,0.74},
    {0.06,0.77},
    {0.06,0.81},
    {0.06,0.84},
    {0.06,0.87},
    {0.06,0.90},
    {0.06,0.94},
    {0.06,0.97},
    {0.06,1.00},
    {0.12,0.00},
    {0.12,0.03},
    {0.12,0.06},
    {0.12,0.10},
    {0.12,0.13},
    {0.12,0.16},
    {0.12,0.19},
    {0.12,0.23},
    {0.12,0.26},
    {0.12,0.29},
    {0.12,0.32},
    {0.12,0.35},
    {0.12,0.39},
    {0.12,0.42},
    {0.12,0.45},
    {0.12,0.48},
    {0.12,0.52},
    {0.12,0.55},
    {0.12,0.58},
    {0.12,0.61},
    {0.12,0.65},
    {0.12,0.68},
    {0.12,0.71},
    {0.12,0.74},
    {0.12,0.77},
    {0.12,0.81},
    {0.12,0.84},
    {0.12,0.87},
    {0.12,0.90},
    {0.12,0.94},
    {0.12,0.97},
    {0.12,1.00},
    {0.18,0.00},
    {0.18,0.03},
    {0.18,0.06},
    {0.18,0.10},
    {0.18,0.13},
    {0.18,0.16},
    {0.18,0.19},
    {0.18,0.23},
    {0.18,0.26},
    {0.18,0.29},
    {0.18,0.32},
    {0.18,0.35},
    {0.18,0.39},
    {0.18,0.42},
    {0.18,0.45},
    {0.18,0.48},
    {0.18,0.52},
    {0.18,0.55},
    {0.18,0.58},
    {0.18,0.61},
    {0.18,0.65},
    {0.18,0.68},
    {0.18,0.71},
    {0.18,0.74},
    {0.18,0.77},
    {0.18,0.81},
    {0.18,0.84},
    {0.18,0.87},
    {0.18,0.90},
    {0.18,0.94},
    {0.18,0.97},
    {0.18,1.00},
    {0.24,0.00},
    {0.24,0.03},
    {0.24,0.06},
    {0.24,0.10},
    {0.24,0.13},
    {0.24,0.16},
    {0.24,0.19},
    {0.24,0.23},
    {0.24,0.26},
    {0.24,0.29},
    {0.24,0.32},
    {0.24,0.35},
    {0.24,0.39},
    {0.24,0.42},
    {0.24,0.45},
    {0.24,0.48},
    {0.24,0.52},
    {0.24,0.55},
    {0.24,0.58},
    {0.24,0.61},
    {0.24,0.65},
    {0.24,0.68},
    {0.24,0.71},
    {0.24,0.74},
    {0.24,0.77},
    {0.24,0.81},
    {0.24,0.84},
    {0.24,0.87},
    {0.24,0.90},
    {0.24,0.94},
    {0.24,0.97},
    {0.24,1.00},
    {0.29,0.00},
    {0.29,0.03},
    {0.29,0.06},
    {0.29,0.10},
    {0.29,0.13},
    {0.29,0.16},
    {0.29,0.19},
    {0.29,0.23},
    {0.29,0.26},
    {0.29,0.29},
    {0.29,0.32},
    {0.29,0.35},
    {0.29,0.39},
    {0.29,0.42},
    {0.29,0.45},
    {0.29,0.48},
    {0.29,0.52},
    {0.29,0.55},
    {0.29,0.58},
    {0.29,0.61},
    {0.29,0.65},
    {0.29,0.68},
    {0.29,0.71},
    {0.29,0.74},
    {0.29,0.77},
    {0.29,0.81},
    {0.29,0.84},
    {0.29,0.87},
    {0.29,0.90},
    {0.29,0.94},
    {0.29,0.97},
    {0.29,1.00},
    {0.35,0.00},
    {0.35,0.03},
    {0.35,0.06},
    {0.35,0.10},
    {0.35,0.13},
    {0.35,0.16},
    {0.35,0.19},
    {0.35,0.23},
    {0.35,0.26},
    {0.35,0.29},
    {0.35,0.32},
    {0.35,0.35},
    {0.35,0.39},
    {0.35,0.42},
    {0.35,0.45},
    {0.35,0.48},
    {0.35,0.52},
    {0.35,0.55},
    {0.35,0.58},
    {0.35,0.61},
    {0.35,0.65},
    {0.35,0.68},
    {0.35,0.71},
    {0.35,0.74},
    {0.35,0.77},
    {0.35,0.81},
    {0.35,0.84},
    {0.35,0.87},
    {0.35,0.90},
    {0.35,0.94},
    {0.35,0.97},
    {0.35,1.00},
    {0.41,0.00},
    {0.41,0.03},
    {0.41,0.06},
    {0.41,0.10},
    {0.41,0.13},
    {0.41,0.16},
    {0.41,0.19},
    {0.41,0.23},
    {0.41,0.26},
    {0.41,0.29},
    {0.41,0.32},
    {0.41,0.35},
    {0.41,0.39},
    {0.41,0.42},
    {0.41,0.45},
    {0.41,0.48},
    {0.41,0.52},
    {0.41,0.55},
    {0.41,0.58},
    {0.41,0.61},
    {0.41,0.65},
    {0.41,0.68},
    {0.41,0.71},
    {0.41,0.74},
    {0.41,0.77},
    {0.41,0.81},
    {0.41,0.84},
    {0.41,0.87},
    {0.41,0.90},
    {0.41,0.94},
    {0.41,0.97},
    {0.41,1.00},
    {0.47,0.00},
    {0.47,0.03},
    {0.47,0.06},
    {0.47,0.10},
    {0.47,0.13},
    {0.47,0.16},
    {0.47,0.19},
    {0.47,0.23},
    {0.47,0.26},
    {0.47,0.29},
    {0.47,0.32},
    {0.47,0.35},
    {0.47,0.39},
    {0.47,0.42},
    {0.47,0.45},
    {0.47,0.48},
    {0.47,0.52},
    {0.47,0.55},
    {0.47,0.58},
    {0.47,0.61},
    {0.47,0.65},
    {0.47,0.68},
    {0.47,0.71},
    {0.47,0.74},
    {0.47,0.77},
    {0.47,0.81},
    {0.47,0.84},
    {0.47,0.87},
    {0.47,0.90},
    {0.47,0.94},
    {0.47,0.97},
    {0.47,1.00},
    {0.53,0.00},
    {0.53,0.03},
    {0.53,0.06},
    {0.53,0.10},
    {0.53,0.13},
    {0.53,0.16},
    {0.53,0.19},
    {0.53,0.23},
    {0.53,0.26},
    {0.53,0.29},
    {0.53,0.32},
    {0.53,0.35},
    {0.53,0.39},
    {0.53,0.42},
    {0.53,0.45},
    {0.53,0.48},
    {0.53,0.52},
    {0.53,0.55},
    {0.53,0.58},
    {0.53,0.61},
    {0.53,0.65},
    {0.53,0.68},
    {0.53,0.71},
    {0.53,0.74},
    {0.53,0.77},
    {0.53,0.81},
    {0.53,0.84},
    {0.53,0.87},
    {0.53,0.90},
    {0.53,0.94},
    {0.53,0.97},
    {0.53,1.00},
    {0.59,0.00},
    {0.59,0.03},
    {0.59,0.06},
    {0.59,0.10},
    {0.59,0.13},
    {0.59,0.16},
    {0.59,0.19},
    {0.59,0.23},
    {0.59,0.26},
    {0.59,0.29},
    {0.59,0.32},
    {0.59,0.35},
    {0.59,0.39},
    {0.59,0.42},
    {0.59,0.45},
    {0.59,0.48},
    {0.59,0.52},
    {0.59,0.55},
    {0.59,0.58},
    {0.59,0.61},
    {0.59,0.65},
    {0.59,0.68},
    {0.59,0.71},
    {0.59,0.74},
    {0.59,0.77},
    {0.59,0.81},
    {0.59,0.84},
    {0.59,0.87},
    {0.59,0.90},
    {0.59,0.94},
    {0.59,0.97},
    {0.59,1.00},
    {0.65,0.00},
    {0.65,0.03},
    {0.65,0.06},
    {0.65,0.10},
    {0.65,0.13},
    {0.65,0.16},
    {0.65,0.19},
    {0.65,0.23},
    {0.65,0.26},
    {0.65,0.29},
    {0.65,0.32},
    {0.65,0.35},
    {0.65,0.39},
    {0.65,0.42},
    {0.65,0.45},
    {0.65,0.48},
    {0.65,0.52},
    {0.65,0.55},
    {0.65,0.58},
    {0.65,0.61},
    {0.65,0.65},
    {0.65,0.68},
    {0.65,0.71},
    {0.65,0.74},
    {0.65,0.77},
    {0.65,0.81},
    {0.65,0.84},
    {0.65,0.87},
    {0.65,0.90},
    {0.65,0.94},
    {0.65,0.97},
    {0.65,1.00},
    {0.71,0.00},
    {0.71,0.03},
    {0.71,0.06},
    {0.71,0.10},
    {0.71,0.13},
    {0.71,0.16},
    {0.71,0.19},
    {0.71,0.23},
    {0.71,0.26},
    {0.71,0.29},
    {0.71,0.32},
    {0.71,0.35},
    {0.71,0.39},
    {0.71,0.42},
    {0.71,0.45},
    {0.71,0.48},
    {0.71,0.52},
    {0.71,0.55},
    {0.71,0.58},
    {0.71,0.61},
    {0.71,0.65},
    {0.71,0.68},
    {0.71,0.71},
    {0.71,0.74},
    {0.71,0.77},
    {0.71,0.81},
    {0.71,0.84},
    {0.71,0.87},
    {0.71,0.90},
    {0.71,0.94},
    {0.71,0.97},
    {0.71,1.00},
    {0.76,0.00},
    {0.76,0.03},
    {0.76,0.06},
    {0.76,0.10},
    {0.76,0.13},
    {0.76,0.16},
    {0.76,0.19},
    {0.76,0.23},
    {0.76,0.26},
    {0.76,0.29},
    {0.76,0.32},
    {0.76,0.35},
    {0.76,0.39},
    {0.76,0.42},
    {0.76,0.45},
    {0.76,0.48},
    {0.76,0.52},
    {0.76,0.55},
    {0.76,0.58},
    {0.76,0.61},
    {0.76,0.65},
    {0.76,0.68},
    {0.76,0.71},
    {0.76,0.74},
    {0.76,0.77},
    {0.76,0.81},
    {0.76,0.84},
    {0.76,0.87},
    {0.76,0.90},
    {0.76,0.94},
    {0.76,0.97},
    {0.76,1.00},
    {0.82,0.00},
    {0.82,0.03},
    {0.82,0.06},
    {0.82,0.10},
    {0.82,0.13},
    {0.82,0.16},
    {0.82,0.19},
    {0.82,0.23},
    {0.82,0.26},
    {0.82,0.29},
    {0.82,0.32},
    {0.82,0.35},
    {0.82,0.39},
    {0.82,0.42},
    {0.82,0.45},
    {0.82,0.48},
    {0.82,0.52},
    {0.82,0.55},
    {0.82,0.58},
    {0.82,0.61},
    {0.82,0.65},
    {0.82,0.68},
    {0.82,0.71},
    {0.82,0.74},
    {0.82,0.77},
    {0.82,0.81},
    {0.82,0.84},
    {0.82,0.87},
    {0.82,0.90},
    {0.82,0.94},
    {0.82,0.97},
    {0.82,1.00},
    {0.88,0.00},
    {0.88,0.03},
    {0.88,0.06},
    {0.88,0.10},
    {0.88,0.13},
    {0.88,0.16},
    {0.88,0.19},
    {0.88,0.23},
    {0.88,0.26},
    {0.88,0.29},
    {0.88,0.32},
    {0.88,0.35},
    {0.88,0.39},
    {0.88,0.42},
    {0.88,0.45},
    {0.88,0.48},
    {0.88,0.52},
    {0.88,0.55},
    {0.88,0.58},
    {0.88,0.61},
    {0.88,0.65},
    {0.88,0.68},
    {0.88,0.71},
    {0.88,0.74},
    {0.88,0.77},
    {0.88,0.81},
    {0.88,0.84},
    {0.88,0.87},
    {0.88,0.90},
    {0.88,0.94},
    {0.88,0.97},
    {0.88,1.00},
    {0.94,0.00},
    {0.94,0.03},
    {0.94,0.06},
    {0.94,0.10},
    {0.94,0.13},
    {0.94,0.16},
    {0.94,0.19},
    {0.94,0.23},
    {0.94,0.26},
    {0.94,0.29},
    {0.94,0.32},
    {0.94,0.35},
    {0.94,0.39},
    {0.94,0.42},
    {0.94,0.45},
    {0.94,0.48},
    {0.94,0.52},
    {0.94,0.55},
    {0.94,0.58},
    {0.94,0.61},
    {0.94,0.65},
    {0.94,0.68},
    {0.94,0.71},
    {0.94,0.74},
    {0.94,0.77},
    {0.94,0.81},
    {0.94,0.84},
    {0.94,0.87},
    {0.94,0.90},
    {0.94,0.94},
    {0.94,0.97},
    {0.94,1.00},
    {1.00,0.00},
    {1.00,0.03},
    {1.00,0.06},
    {1.00,0.10},
    {1.00,0.13},
    {1.00,0.16},
    {1.00,0.19},
    {1.00,0.23},
    {1.00,0.26},
    {1.00,0.29},
    {1.00,0.32},
    {1.00,0.35},
    {1.00,0.39},
    {1.00,0.42},
    {1.00,0.45},
    {1.00,0.48},
    {1.00,0.52},
    {1.00,0.55},
    {1.00,0.58},
    {1.00,0.61},
    {1.00,0.65},
    {1.00,0.68},
    {1.00,0.71},
    {1.00,0.74},
    {1.00,0.77},
    {1.00,0.81},
    {1.00,0.84},
    {1.00,0.87},
    {1.00,0.90},
    {1.00,0.94},
    {1.00,0.97},
    {1.00,1.00}
    };

}

@interface MetalView() {
    
    __weak CAMetalLayer *_metalLayer;
    MTLRenderPassDescriptor *_renderPassDescriptor;
    
    id<MTLDevice> _device;
    id<MTLCommandQueue> _commandQueue;
    
    id<CAMetalDrawable> _metalDrawable;
    
    id<MTLTexture> _drawabletexture;    

    id<MTLBuffer> _timeBuffer;
    id<MTLBuffer> _resolutionBuffer;
    id<MTLBuffer> _mouseBuffer;
    
    id<MTLTexture> _texture;
    id<MTLTexture> _map;
        
    id<MTLBuffer> _verticesBuffer;
    id<MTLBuffer> _indicesBuffer;
    id<MTLBuffer> _texcoordBuffer;
    
    std::vector<id<MTLLibrary>> _library;
    std::vector<id<MTLRenderPipelineState>> _renderPipelineState;
    std::vector<MTLRenderPipelineDescriptor *> _renderPipelineDescriptor;
    std::vector<id<MTLArgumentEncoder>> _argumentEncoder;
    std::vector<id<MTLBuffer>> _argumentEncoderBuffer;
        
    CGRect _frame;
    double _starttime;

    bool _isGetBytes;
    int _mode;
}
@end

@implementation MetalView

+(Class)layerClass { return [CAMetalLayer class]; }
-(void)mode:(unsigned int)n { _mode = n; }
-(BOOL)wantsUpdateLayer { return YES; }
-(void)updateLayer { [super updateLayer]; }
-(id<MTLTexture>)texture { return _texture; }
-(id<MTLTexture>)map { return _map; }
-(id<MTLTexture>)drawableTexture { return _drawabletexture; }
-(void)cleanup { _metalDrawable = nil; }

-(void)resize:(CGRect)frame {
    self.frame = frame;
    id<MTLTexture> texture = [self texture];
    int width  = (int)texture.width;
    int height = (int)texture.height;    
    _metalLayer.drawableSize = CGSizeMake(width,height);
}

-(void)setColorAttachment:(MTLRenderPipelineColorAttachmentDescriptor *)colorAttachment {
    colorAttachment.blendingEnabled = YES;
    colorAttachment.rgbBlendOperation = MTLBlendOperationAdd;
    colorAttachment.alphaBlendOperation = MTLBlendOperationAdd;
    colorAttachment.sourceRGBBlendFactor = MTLBlendFactorSourceAlpha;
    colorAttachment.sourceAlphaBlendFactor = MTLBlendFactorOne;
    colorAttachment.destinationRGBBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
    colorAttachment.destinationAlphaBlendFactor = MTLBlendFactorOne;
}

-(bool)setupShader {
    
    for(int k=0; k<_library.size(); k++) {
        
        id<MTLFunction> vertexFunction  = [_library[k] newFunctionWithName:@"vertexShader"];
        if(!vertexFunction) return nil;
        
        id<MTLFunction> fragmentFunction = [_library[k] newFunctionWithName:@"fragmentShader"];
        if(!fragmentFunction) return nil;
        
        _renderPipelineDescriptor.push_back([MTLRenderPipelineDescriptor new]);
        if(!_renderPipelineDescriptor[k]) return nil;
        _argumentEncoder.push_back([fragmentFunction newArgumentEncoderWithBufferIndex:0]);

        _renderPipelineDescriptor[k].depthAttachmentPixelFormat      = MTLPixelFormatInvalid;
        _renderPipelineDescriptor[k].stencilAttachmentPixelFormat    = MTLPixelFormatInvalid;
        _renderPipelineDescriptor[k].colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
        
        if(_isGetBytes) {
            _renderPipelineDescriptor[k].colorAttachments[0].blendingEnabled = NO;
        }
        else {
            [self setColorAttachment:_renderPipelineDescriptor[k].colorAttachments[0]];
        }
        
        _renderPipelineDescriptor[k].sampleCount = 1;
       
        _renderPipelineDescriptor[k].vertexFunction   = vertexFunction;
        _renderPipelineDescriptor[k].fragmentFunction = fragmentFunction;
        
        NSError *error = nil;
        _renderPipelineState.push_back([_device newRenderPipelineStateWithDescriptor:_renderPipelineDescriptor[k] error:&error]);
        if(error||!_renderPipelineState[k]) return true;
    }
    
    return false;
}

-(bool)updateShader:(unsigned int)index {
    
    if(index>=_library.size()) return true;
    
    id<MTLFunction> vertexFunction  = [_library[index] newFunctionWithName:@"vertexShader"];
    if(!vertexFunction) return nil;
    
    id<MTLFunction> fragmentFunction = [_library[index] newFunctionWithName:@"fragmentShader"];
    if(!fragmentFunction) return nil;
    
    _argumentEncoder[index] = [fragmentFunction newArgumentEncoderWithBufferIndex:0];
    
    _renderPipelineDescriptor[index].sampleCount = 1;
   
    _renderPipelineDescriptor[index].vertexFunction   = vertexFunction;
    _renderPipelineDescriptor[index].fragmentFunction = fragmentFunction;
    
    NSError *error = nil;
    _renderPipelineState[index] = [_device newRenderPipelineStateWithDescriptor:_renderPipelineDescriptor[index] error:&error];
    if(error||!_renderPipelineState[index]) return true;
    
    return false;
}


-(bool)reloadShader:(dispatch_data_t)data :(unsigned int)index {
    
    NSError *error = nil;
    _library[index] = [_device newLibraryWithData:data error:&error];
    if(error||!_library[index]) return true;
    if([self updateShader:index]) return true;
    
    return false;
}

-(bool)setup:(std::vector<NSString *>)shaders :(bool)isGetBytes {
    
    _starttime = CFAbsoluteTimeGetCurrent();

    self.wantsLayer = YES;
    self.layer = [CAMetalLayer layer];
    _metalLayer = (CAMetalLayer *)self.layer;
    _device = MTLCreateSystemDefaultDevice();
    
    _metalLayer.device = _device;
    _metalLayer.pixelFormat = MTLPixelFormatBGRA8Unorm;
    _metalLayer.colorspace = CGColorSpaceCreateDeviceRGB();
    
    _metalLayer.opaque = NO;
    _metalLayer.framebufferOnly = NO;
    _metalLayer.displaySyncEnabled = YES;
    
    _commandQueue = [_device newCommandQueue];
    if(!_commandQueue) return true;
    
    
    NSError *error = nil;
    
    for(int k=0; k<shaders.size(); k++) {
         _library.push_back([_device newLibraryWithFile:[NSString stringWithFormat:@"%@/%@",[[NSBundle mainBundle] bundlePath],shaders[k]] error:&error]);
        if(error||!_library[_library.size()-1]) return true;
    }
    
    _isGetBytes = isGetBytes;
    _mode = 0;
    
    if([self setupShader]) return true;
    
    _timeBuffer = [_device newBufferWithLength:sizeof(float) options:MTLResourceOptionCPUCacheModeDefault];
    if(!_timeBuffer) return true;
    
    _resolutionBuffer = [_device newBufferWithLength:sizeof(float)*2 options:MTLResourceOptionCPUCacheModeDefault];
    if(!_resolutionBuffer) return true;
    
    float *resolutionBuffer = (float *)[_resolutionBuffer contents];
    resolutionBuffer[0] = _frame.size.width;
    resolutionBuffer[1] = _frame.size.height;
    
    _mouseBuffer = [_device newBufferWithLength:sizeof(float)*2 options:MTLResourceOptionCPUCacheModeDefault];
    if(!_mouseBuffer) return true;
    
    MTLTextureDescriptor *texDesc = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatRGBA8Unorm width:_frame.size.width height:_frame.size.height mipmapped:NO];
    if(!texDesc) return true;
    
    _texture = [_device newTextureWithDescriptor:texDesc];
    if(!_texture)  return true;
    
    _map = [_device newTextureWithDescriptor:texDesc];
    if(!_map)  return true;
    
    _verticesBuffer = [_device newBufferWithBytes:Plane::vertices length:Plane::VERTICES_SIZE*sizeof(float)*4 options:MTLResourceOptionCPUCacheModeDefault];
    if(!_verticesBuffer) return true;
    
    _indicesBuffer = [_device newBufferWithBytes:Plane::indices length:Plane::INDICES_SIZE*sizeof(short) options:MTLResourceOptionCPUCacheModeDefault];
    if(!_indicesBuffer) return true;
    
    _texcoordBuffer = [_device newBufferWithBytes:Plane::texcoord length:Plane::TEXCOORD_SIZE*sizeof(float)*2 options:MTLResourceOptionCPUCacheModeDefault];
    if(!_texcoordBuffer) return true;
    
    for(int k=0; k<_library.size(); k++) {
        _argumentEncoderBuffer.push_back([_device newBufferWithLength:sizeof(float)*[_argumentEncoder[k] encodedLength] options:MTLResourceOptionCPUCacheModeDefault]);

        [_argumentEncoder[k] setArgumentBuffer:_argumentEncoderBuffer[k] offset:0];
        [_argumentEncoder[k] setBuffer:_timeBuffer offset:0 atIndex:0];
        [_argumentEncoder[k] setBuffer:_resolutionBuffer offset:0 atIndex:1];
        [_argumentEncoder[k] setBuffer:_mouseBuffer offset:0 atIndex:2];
        [_argumentEncoder[k] setTexture:_texture atIndex:3];
        [_argumentEncoder[k] setTexture:_map atIndex:4];
    }
    
    return false;
}

-(id)initWithFrame:(CGRect)frame :(std::vector<NSString *>)shaders :(bool)isGetBytes {
    
    if(shaders.size()==0) return nil;
    self = [super initWithFrame:frame];
    if(self) {
        _frame = frame;
       if([self setup:shaders :isGetBytes]) return nil;
    }
    return self;
}

-(id)initWithFrame:(CGRect)frame :(std::vector<NSString *>)shaders {
    
    if(shaders.size()==0) return nil;
    self = [super initWithFrame:frame];
    if(self) {
        _frame = frame;
       if([self setup:shaders :false]) return nil;
    }
    return self;
}


-(id)initWithFrame:(CGRect)frame {
    
    self = [super initWithFrame:frame];
    if(self) {
        _frame = frame;
       if([self setup:{@"blue.metallib"} :false]) return nil;
    }
    return self;
}


-(id<MTLCommandBuffer>)setupCommandBuffer:(int)mode {
    
    if(!_metalDrawable) {
        _metalDrawable = [_metalLayer nextDrawable];
    }
    
    if(!_metalDrawable) {
        _renderPassDescriptor = nil;
    }
    else {
        
        if(_renderPassDescriptor == nil) {
            _renderPassDescriptor = [MTLRenderPassDescriptor renderPassDescriptor];
        }
    }
    
    if(_metalDrawable&&_renderPassDescriptor) {
        
        id<MTLCommandBuffer> commandBuffer = [_commandQueue commandBuffer];
        
        float *timeBuffer = (float *)[_timeBuffer contents];
        timeBuffer[0] = CFAbsoluteTimeGetCurrent()-_starttime;
        
        float *mouseBuffer = (float *)[_mouseBuffer contents];
        
        double x = _frame.origin.x;
        double y = _frame.origin.y;
        double w = _frame.size.width;
        double h = _frame.size.height;
        
        NSPoint mouseLoc = [NSEvent mouseLocation];
        mouseBuffer[0] = (mouseLoc.x-x)/w;
        mouseBuffer[1] = (mouseLoc.y-y)/h;
        
        MTLRenderPassColorAttachmentDescriptor *colorAttachment = _renderPassDescriptor.colorAttachments[0];
        colorAttachment.texture = _metalDrawable.texture;
        colorAttachment.loadAction  = MTLLoadActionClear;
        colorAttachment.clearColor  = MTLClearColorMake(0.0f,0.0f,0.0f,0.0f);
        colorAttachment.storeAction = MTLStoreActionStore;
        
        id<MTLRenderCommandEncoder> renderEncoder = [commandBuffer renderCommandEncoderWithDescriptor:_renderPassDescriptor];
        
        [renderEncoder setFrontFacingWinding:MTLWindingCounterClockwise];
        [renderEncoder setRenderPipelineState:_renderPipelineState[mode]];
        
        [renderEncoder setVertexBuffer:_verticesBuffer offset:0 atIndex:0];
        [renderEncoder setVertexBuffer:_texcoordBuffer offset:0 atIndex:1];

        [renderEncoder useResource:_timeBuffer usage:MTLResourceUsageRead];
        [renderEncoder useResource:_resolutionBuffer usage:MTLResourceUsageRead];
        [renderEncoder useResource:_mouseBuffer usage:MTLResourceUsageRead];
        [renderEncoder useResource:_texture usage:MTLResourceUsageSample];
        [renderEncoder useResource:_map usage:MTLResourceUsageSample];

        [renderEncoder setFragmentBuffer:_argumentEncoderBuffer[mode] offset:0 atIndex:0];

        [renderEncoder drawIndexedPrimitives:MTLPrimitiveTypeTriangle indexCount:Plane::INDICES_SIZE indexType:MTLIndexTypeUInt16 indexBuffer:_indicesBuffer indexBufferOffset:0];
            
        [renderEncoder endEncoding];
        [commandBuffer presentDrawable:_metalDrawable];
        
        _drawabletexture = _metalDrawable.texture;

        return commandBuffer;
    }
    
    return nil;
}

-(void)update:(void (^)(id<MTLCommandBuffer>))onComplete {
    
    int mode = _mode;
    if(mode>=_library.size()) mode = _library.size()-1;
    
    if(_renderPipelineState[mode]) {
                
        id<MTLCommandBuffer> commandBuffer = [self setupCommandBuffer:mode];
        if(commandBuffer) {
            [commandBuffer addCompletedHandler:onComplete];
            [commandBuffer commit];
            [commandBuffer waitUntilCompleted];
        }
    }
}

-(void)dealloc {
    
}

@end
